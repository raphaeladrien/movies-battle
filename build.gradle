import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

buildscript {
    ext {
        logbackVersion = "1.4.7"
        logstashEncoderVersion = "7.3"
        jacksonDatabindVersion = "2.14.2"
        jacksonBomVersion = "2.14.2"
        jUnitVersion = "5.9.3"
        jUnitMockitoVersion = "5.3.1"
        commonsLangVersion = "3.12.0"
    }
}

plugins {
    id 'java'
    id 'org.springframework.boot' version '3.0.6'
    id 'io.spring.dependency-management' version '1.1.0'
    id 'pmd'
}

apply plugin: 'pmd'

pmd {
    consoleOutput = true
    toolVersion = "6.55.0"
    rulesMinimumPriority = 5
    ruleSets = ["category/java/bestpractices.xml"]
}

group = 'tech.ada.game'
sourceCompatibility = '17'

repositories {
    mavenCentral()
}

dependencies {
    implementation("org.springframework.boot:spring-boot-starter-web")
    implementation("org.apache.commons:commons-lang3:${commonsLangVersion}")

    implementation("ch.qos.logback:logback-classic:${logbackVersion}")
    implementation("net.logstash.logback:logstash-logback-encoder:${logstashEncoderVersion}")

    implementation("com.fasterxml.jackson.core:jackson-databind:${jacksonDatabindVersion}")
    implementation("com.fasterxml.jackson:jackson-bom:${jacksonBomVersion}")

    testImplementation("org.springframework.boot:spring-boot-starter-test"){
        exclude group: 'junit'
    }
    testImplementation("org.junit.jupiter:junit-jupiter-api:${jUnitVersion}")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${jUnitVersion}")

    testImplementation("org.mockito:mockito-junit-jupiter:${jUnitMockitoVersion}")
    testImplementation("org.mockito:mockito-core")
}

tasks.named('test') {
    useJUnitPlatform()
}

tasks.withType(Test) {
    testLogging {
        // set options for log level LIFECYCLE
        events TestLogEvent.FAILED,
                TestLogEvent.PASSED,
                TestLogEvent.SKIPPED

        // set options for log level DEBUG and INFO
        debug {
            events TestLogEvent.STARTED,
                    TestLogEvent.FAILED,
                    TestLogEvent.PASSED,
                    TestLogEvent.SKIPPED,
                    TestLogEvent.STANDARD_ERROR,
                    TestLogEvent.STANDARD_OUT
        }
        info.events = debug.events
        info.showExceptions = true

        exceptionFormat = TestExceptionFormat.FULL

        afterSuite { desc, result ->
            if (!desc.parent) {
                println('-----------')
                println("${result.resultType}")
                println("Total: ${result.testCount}")
                println("Passed: ${result.successfulTestCount}")
                println("Failed: ${result.failedTestCount}")
                println("Skiped: ${result.skippedTestCount}")
                println('-----------')
            }
        }
    }
}
